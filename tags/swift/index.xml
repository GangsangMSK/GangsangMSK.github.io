<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Swift - Tag - MSK&#39;s playground</title>
        <link>https://gangsangmsk.github.io/tags/swift/</link>
        <description>Swift - Tag - MSK&#39;s playground</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wjdgudtk1234@gmail.com (Minsuk Kim)</managingEditor>
            <webMaster>wjdgudtk1234@gmail.com (Minsuk Kim)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 27 Sep 2022 16:12:36 &#43;0900</lastBuildDate><atom:link href="https://gangsangmsk.github.io/tags/swift/" rel="self" type="application/rss+xml" /><item>
    <title>[Swift] Operator(연산자)</title>
    <link>https://gangsangmsk.github.io/operator/</link>
    <pubDate>Tue, 27 Sep 2022 16:12:36 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/operator/</guid>
    <description><![CDATA[Assingnment Operator (기본 할당 연산자) 할당 연산자는 두 개의 피연산자를 가진다.
왼쪽에 있는 피연산자는 값이 할당되는 변수 또는 상수이며, 오른쪽에 있는 피연산자는 할당할 값을 쓴다.
오른쪽 피연산자는 주로 산술식 또는 논리식을 수행하는 표현식이며, 그 결과는 왼쪽 피연산자인 변수나 상수에 할당한다.
1 2 3 4 5 6 7 let a = 10 var b = 20 b = a // b에 10이 들어간다. let (x, y) = (1, 2) // x는 1이고, y는 2이다.]]></description>
</item>
<item>
    <title>[Swift] Any &amp; AnyObject</title>
    <link>https://gangsangmsk.github.io/anyandanyobject/</link>
    <pubDate>Tue, 27 Sep 2022 16:08:29 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/anyandanyobject/</guid>
    <description><![CDATA[AnyObject(protocal) AnyObject can represent an instance of any class type.
AnyObject는 범용 타입이고 상속관계가 아니라도 타입 캐스팅 가능한 타입이다.
어떤 클래스의 객체도 저장 가능하다.
가장 추상화된 최상위 개념이고 Objective-C의 id와 같다.
클래스만 허용하며 구조체나 열거형은 허용하지 않는다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var x : Any = &#34;Hi&#34; print(x, type(of:x)) // Hi String x = 10 print(x, type(of:x)) // 10 Int x = 3.]]></description>
</item>
<item>
    <title>[Swift] Optinal(옵셔널), Optional Binding(옵셔널 바인딩)</title>
    <link>https://gangsangmsk.github.io/optinals/</link>
    <pubDate>Tue, 27 Sep 2022 15:45:28 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/optinals/</guid>
    <description><![CDATA[Optional (옵셔널) 값을 반환할 때 오류가 발생할 가능성이 있는 값은 옵셔널 타입이라는 객체로 감싸서 반환한다.
1 2 3 4 print(Int(&#34;123&#34;)) // Optional(123) 을 출력 print(Int(&#34;Hi&#34;)) // Int(&#34;Hi&#34;) 은 정수 값을 반환할 수 없음, 아무런 값도 반환할 수 없다는 의미로 nil을 반환 Optional Type (옵셔널 타입) Swift에서는 기본 자료형(Int, Double, String 등)은 기본적으로는 nil값을 저장할 수 없지만 옵셔널 타입을 이용하여 nil 값을 저장할 수 있다.
옵셔널 타입은 변수 또는 상수에 아무런 값이 할당되지 않는 상황을 안전하게 처리하기 위한 방법 제공한다.]]></description>
</item>
<item>
    <title>[Swift] Tuple</title>
    <link>https://gangsangmsk.github.io/tuple/</link>
    <pubDate>Sun, 25 Sep 2022 17:20:38 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/tuple/</guid>
    <description><![CDATA[Tuple(튜플) 튜플은 Swift 에서 가장 강력한 기능 중 하나이다. 여러 값을 하나의 개체에 일시적으로 묶는 방법이다. 튜플에는 타입과 상관없이 요소들을 저장할 수 있고, 저장된 값들이 모두 동일한 타입이어야 한다는 제약이 없다. 튜플의 요소들은 다양한 방법들을 이용해 접근할 수 있다.
인덱스 위치를 참조하여 접근할 수 있다. 1 2 3 4 let myTuple = (10, 12.1, &#34;Hi&#34;) let myString = myTuple.2 print(myString) //Hi 튜플의 요소를 추출하여 번수 또는 상수에 할당하여 사용할 수 있다.]]></description>
</item>
<item>
    <title>[Swift] 타입 어노테이션(Type annotation)과 타입 추론(Type inference)</title>
    <link>https://gangsangmsk.github.io/type_annotationtype_inference/</link>
    <pubDate>Mon, 19 Sep 2022 19:51:26 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/type_annotationtype_inference/</guid>
    <description><![CDATA[Swift는 타입 안전(Type safe) 프로그래밍 언어이다. 그로 인해 변수의 타입이 식별되면, 그 변수는 다른 타입의 데이터를 저장하는데 사용할 수 없다. 변수가 선언되 후에도 다른 타입의 데이터를 저장할 수 있는 loosely typed(Ex:JavaScript) 언어와 대조적이다.
변수 또는 상수의 식별 방법엔 두 가지가 존재한다.
타입 어노테이션(Type annotation)
변수 또는 상수가 코드 내에서 선언되는 시점에 데이터 타입을 정해주는 경우
변수 또는 상수 이름 다음에 타입 선언을 하면 된다. 1 var num : Int = 10 // : Int가 Type annotation 상수를 선언할 때도 타입 어노테이션을 통해 나중에 값을 할당할 수 있다.]]></description>
</item>
<item>
    <title>[Swift] var과 let</title>
    <link>https://gangsangmsk.github.io/varlet/</link>
    <pubDate>Mon, 19 Sep 2022 19:01:29 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/varlet/</guid>
    <description><![CDATA[var / 변수 변수는 프로그램에서 사용될 데이터를 저장하기 위한 메모리 공간이다.
변수는 할당된 값의 변경이 가능하다.
1 2 3 4 5 var 변수명 : 데이터 타입 // 사용법 var x = 0.0, y= 0.0, z = 0.0 // ,를 사용하여 여러개의 변수 선언 가능 var num = 10 // : Int 생략가능 num = 20 //문제 없음 let / 상수 상수(const)는 데이터 값을 저장하기 위한 메모리 공간을 제공하는 점은 변수와 비슷하나, 한번 할당되면 그 이후로는 값을 변경할 수 없다.]]></description>
</item>
<item>
    <title>[Swift] DataType(자료형)</title>
    <link>https://gangsangmsk.github.io/datatype/</link>
    <pubDate>Fri, 16 Sep 2022 18:39:03 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/datatype/</guid>
    <description><![CDATA[자료형(Data Type)의 종류 Int Integer는 42와 -23과 같은 소수점이 없는 정수이다. 정수는 부호(양수, 0 또는 음수) 또는 부호가 없는(양수 또는 0)이다.
Swift는 8, 16, 32 및 64비트 형태로 Unsigned Integer를 지원한다. 이 Integer는 C와 유사한 명명 규칙을 따르며, 8비트 Unsigned Integer는 UInt8 유형이고 32비트 부호 있는 정수는 Int32 유형이다. Swift의 모든 유형과 마찬가지로, 이러한 Integer 유형에는 대문자를 사용한다.
하지만 애플은 특정 크기의 데이터 타입보다는 Int 데이터 타입 사용을 권장한다.
Int 데이터 타입은 해당 코드가 실행되는 플랫폼에 맞는 정수 크기를 사용한다.]]></description>
</item>
</channel>
</rss>
