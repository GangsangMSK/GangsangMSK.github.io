[{"categories":["Swift 실습"],"content":"Swift Practice","date":"2022-09-20","objectID":"/220920/","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Simple Values import UIKit var greeting = \"Hello, playground\" var x = 10 print(x) //10 ","date":"2022-09-20","objectID":"/220920/:1:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Control Flow(제어 흐름) ","date":"2022-09-20","objectID":"/220920/:2:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Functions and Closures(함수와 클로져) ","date":"2022-09-20","objectID":"/220920/:3:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Objects and Classes(객체와 클래스) ","date":"2022-09-20","objectID":"/220920/:4:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Enumerations and Structures(열거형과 구조체) ","date":"2022-09-20","objectID":"/220920/:5:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Concurrency(동시성) ","date":"2022-09-20","objectID":"/220920/:6:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Protocols and Extensions(프로토콜과 확장) ","date":"2022-09-20","objectID":"/220920/:7:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Error Handling (오류 처리) ","date":"2022-09-20","objectID":"/220920/:8:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Generics ","date":"2022-09-20","objectID":"/220920/:9:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 실습"],"content":"Style Guide Swift 스타일 가이드 Swift 공식 문서 ","date":"2022-09-20","objectID":"/220920/:10:0","tags":["Swift Practice"],"title":"Swift Practice in 22/09/20","uri":"/220920/"},{"categories":["Swift 문법"],"content":"Swift's type annotation and type inference","date":"2022-09-19","objectID":"/type_annotationtype_inference/","tags":["Swift"],"title":"타입 어노테이션(Type annotation)과 타입 추론(Type inference)","uri":"/type_annotationtype_inference/"},{"categories":["Swift 문법"],"content":"Swift는 타입 안전(Type safe) 프로그래밍 언어이다. 그로 인해 변수의 타입이 식별되면, 그 변수는 다른 타입의 데이터를 저장하는데 사용할 수 없다. 변수가 선언되 후에도 다른 타입의 데이터를 저장할 수 있는 loosely typed(Ex:JavaScript) 언어와 대조적이다. 변수 또는 상수의 식별 방법엔 두 가지가 존재한다. 타입 어노테이션(Type annotation) 변수 또는 상수가 코드 내에서 선언되는 시점에 데이터 타입을 정해주는 경우 변수 또는 상수 이름 다음에 타입 선언을 하면 된다. var num : Int = 10 // : Int가 Type annotation 상수를 선언할 때도 타입 어노테이션을 통해 나중에 값을 할당할 수 있다. let bookTitle : String var book = true if book { bookTitle = \"iOS\" } else { bookTitle = \"Android\" } print(bookTitle) // 값이 한번만 할당되어 사용가능 //iOS 타입 추론(Type inference) 선언부에 타입 어노테이션이 없어, 컴파일러가 데이터 타입 식별을 위해 변수 또는 상수에 값이 할당되는 시점에 값의 타입을 확인하여 정해주는 경우 var num = 10 // 10(Int)를 통해 num이라는 변수의 타입을 Int라 추론 // var num : Int = 10 ","date":"2022-09-19","objectID":"/type_annotationtype_inference/:0:0","tags":["Swift"],"title":"타입 어노테이션(Type annotation)과 타입 추론(Type inference)","uri":"/type_annotationtype_inference/"},{"categories":["Swift 문법"],"content":"Swift's var \u0026 let","date":"2022-09-19","objectID":"/varlet/","tags":["Swift"],"title":"Swift의 var과 let","uri":"/varlet/"},{"categories":["Swift 문법"],"content":"var / 변수 변수는 프로그램에서 사용될 데이터를 저장하기 위한 메모리 공간이다. 변수는 할당된 값의 변경이 가능하다. var 변수명 : 데이터 타입 // 사용법 var x = 0.0, y= 0.0, z = 0.0 // ,를 사용하여 여러개의 변수 선언 가능 var num = 10 // : Int 생략가능 num = 20 //문제 없음 ","date":"2022-09-19","objectID":"/varlet/:1:0","tags":["Swift"],"title":"Swift의 var과 let","uri":"/varlet/"},{"categories":["Swift 문법"],"content":"let / 상수 상수(const)는 데이터 값을 저장하기 위한 메모리 공간을 제공하는 점은 변수와 비슷하나, 한번 할당되면 그 이후로는 값을 변경할 수 없다. 상수는 코드 내에서 반복적으로 사용하는 값이 있을 경우, 상수에 할당하여 사용하면 유지보수에 도움이 된다. let 상수명 : 데이터 타입 let test : String //선언 시, 초기화를 안해주어도 사용가능함 let text : String = \"상수\" text = \"변수\" //syntax error 발생 애플은 코드의 효율성과 실행 성능을 높이기 위해서 변수(var)보다는 상수(let) 사용을 권장한다. ","date":"2022-09-19","objectID":"/varlet/:2:0","tags":["Swift"],"title":"Swift의 var과 let","uri":"/varlet/"},{"categories":["Swift 문법"],"content":"참고자료 Swift Language Guide Smile Han Youtube - iOS 1주차-3 : Swift 데이터타입, var, let 다소니닷넷:티스토리 ","date":"2022-09-19","objectID":"/varlet/:3:0","tags":["Swift"],"title":"Swift의 var과 let","uri":"/varlet/"},{"categories":null,"content":"iOS 앱 개발자를 목표로 공부하고 있습니다. ","date":"2022-09-19","objectID":"/about/introduce/:0:0","tags":null,"title":"Introduce","uri":"/about/introduce/"},{"categories":["Swift 문법"],"content":"Swift's datatype","date":"2022-09-16","objectID":"/datatype/","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"자료형(Data Type)의 종류 ","date":"2022-09-16","objectID":"/datatype/:1:0","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"Int Integer는 42와 -23과 같은 소수점이 없는 정수이다. 정수는 부호(양수, 0 또는 음수) 또는 부호가 없는(양수 또는 0)이다. Swift는 8, 16, 32 및 64비트 형태로 Unsigned Integer를 지원한다. 이 Integer는 C와 유사한 명명 규칙을 따르며, 8비트 Unsigned Integer는 UInt8 유형이고 32비트 부호 있는 정수는 Int32 유형이다. Swift의 모든 유형과 마찬가지로, 이러한 Integer 유형에는 대문자를 사용한다. 하지만 애플은 특정 크기의 데이터 타입보다는 Int 데이터 타입 사용을 권장한다. Int 데이터 타입은 해당 코드가 실행되는 플랫폼에 맞는 정수 크기를 사용한다. var [변수명] : Int = [초깃값] //초깃값 입력 시, Int 생략 가능 print(Int32.min) //최솟값 //-2147483648 print(Int32.max) //최댓값 //2147483647 해당하는 자료형의 .min, .max를 이용하면 최솟값과 최대값을 구할 수 있다. ","date":"2022-09-16","objectID":"/datatype/:1:1","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"Float \u0026 Double 소수는 3.14159, 0.1 및 -273.15와 같은 소수점을 가진 숫자이다. Float와 Double 데이터 타입은 Int 데이터 타입보다 훨씬 더 넓은 범위의 값을 나타내고 저장할 수 있습니다. Float 데이터 타입은 32비트로 부동 소수점 수를 저장하고, 소수점 6자리까지 정확도를 가집니다. Double 데이터 타비은 64비트로 부동 소수점 수를 저장하고, 소수점 15자리까지 정확도를 가집니다. 소수를 표현하는 데이터 타입은 Double이 기본이다. var [변수명] : Float = [초깃값] //초깃값 입력 시, Float 생략 가능 var [변수명] : Double = [초깃값] //초깃값 입력 시, Double 생략 가능 ","date":"2022-09-16","objectID":"/datatype/:1:2","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"Bool 참 또는 거짓(1 또는 0) 조건을 처리하는 데이터 타입이다. Boolean 데이터 타입을 처리하기 위하여 두개의 Boolean 상수 값(true/false)을 사용한다 var [변수명] : Bool = [true/false] //초깃값 입력 시, Bool 생략 가능 ","date":"2022-09-16","objectID":"/datatype/:1:3","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"Character 문자, 숫자, 문장 부호, 심볼 같은 유니코드(Unicode) 문자 하나를 저장한다. Swift에서의 문자들은 문자소 묶음(grapheme cluster)의 형태로 저장한다. 문자소 묶음은 하나의 문자를 표현하기 위하여 유니코드 코드 값들로 이루어진다. var [변수명] : Character = [초깃값] //Character 생략불가, 생략 시 String 데이터 타입이 된다. ","date":"2022-09-16","objectID":"/datatype/:1:4","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"String 단어나 문장을 구성하는 일련의 문자다. 저장, 검색, 비교, 문자열 연결, 수정 등의 기능을 포함한다. 문자열 보간(string interpolation)을 사용하여 문자열과 변수, 상수, 표현식, 함수 호출의 조합으로 만들 수도 있다. var [변수명] : String = [초기값] //String 생략하여 사용하는 것이 일반적임 문자열 보간법(string interpolation) 문자열 보간법(String Interpolation)은 변수 또는 상수 등의 값을 문자열 내에 나타내고 싶을 때 사용하는데 문자열 내에 (변수나 상수) 의 형태로 표기하면 이를 문자열로 치환해서 넣어 준다. 문자열 보간법을 이용해 프로그래머가 원하는 문자열로 치환하려면 변수나 상수 타입을 CustomStringConvertible프로토콜을 준수하는 description프로퍼티로 구현한다. ","date":"2022-09-16","objectID":"/datatype/:1:5","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Swift 문법"],"content":"참고자료 Swift Language Guide Smile Han Youtube - iOS 1주차-3 : Swift 데이터타입, var, let Mr.후:티스토리 ","date":"2022-09-16","objectID":"/datatype/:2:0","tags":["Swift"],"title":"Swift의 DataType","uri":"/datatype/"},{"categories":["Blog"],"content":"hugo, Github, Mac을 이용하여 github.io를 생성하는 방법","date":"2022-09-13","objectID":"/makeblogwithhugoandgithub/","tags":["Mac","Linux","OS"],"title":"hugo \u0026 Github을 사용한 블로그 구축","uri":"/makeblogwithhugoandgithub/"},{"categories":["Blog"],"content":"개발환경 Hardware : Macbook Pro(16-inch,M1,2021) OS : macOS Monterey 12.5 Shell : zsh hugo : hugo v0.102.3+extended darwin/arm64 brew : Homebrew 3.6.1 ","date":"2022-09-13","objectID":"/makeblogwithhugoandgithub/:1:0","tags":["Mac","Linux","OS"],"title":"hugo \u0026 Github을 사용한 블로그 구축","uri":"/makeblogwithhugoandgithub/"},{"categories":["Blog"],"content":"블로그 구축 방법 Github repository 생성 블로그 구축을 위해 소스 원본 저장 및 관리용 개발용(Development) repository : blog 개발용 repository를 빌드한 결과물 서비스용 repositoty : (username).github.io 2개의 repository를 생성한다. 2개의 repository 사용은 블로그를 운영하는 데에 필수는 아니지만, 일괄적으로 Github repository에서 글 작성, 변경이나 버전 관리 등이 편하기에 사용한다. Hugo 설치 Homebrew를 사용하여 hugo 설치 $ brew install hugo hugo가 설치되었는지 확인 $ brew version hugo v0.102.3+extended darwin/arm64 BuildDate=unknown 정상적으로 hugo가 설치되었으면 버전이 출력된다. 사이트 생성 프로젝트를 만들 폴더로 이동한다. $ pwd /Users/ms ## 트리 구조로 본 프로젝트 경로 / └── Users └── ms └── blog \u003c== 내가 새로 만들 블로그 폴더 사이트 생성 명령어 $ hugo new site [프로젝트 이름(폴더 명)] $ hugo new site blog Congratulations! Your new Hugo site is created in /Users/ms/blog. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \"hugo new theme \u003cTHEMENAME\u003e\" command. 2. Perhaps you want to add some content. You can add single files with \"hugo new \u003cSECTIONNAME\u003e/\u003cFILENAME\u003e.\u003cFORMAT\u003e\". 3. Start the built-in live server via \"hugo server\". Visit https://gohugo.io/ for quickstart guide and full documentation. 메세지와 함께 blog 폴더가 생성된 걸 확인할 수 있다. 테마 다운로드 현재 블로그 테마는 LoveIt을 사용하고 있다. 블로그 프로젝트 폴더로 이동하여 git init 명령어를 통해 git 환경을 구성한다. $ pwd /Users/ms/blog $ git init 서브모듈(submodule)의 개념 Git의 서브모듈(Submodule)이란 하나의 저장소(Repository) 안에 있는 또 다른 별개의 저장소이다. 보통 다른 원격 저장소를 가져와(Pull) 서브모듈로 사용하게 된다. 테마 깃허브 저장소를 서브모듈로 가져오기 $ pwd /Users/ms/blog $ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt git submodule 명령어를 통해 submodule 목록이 생성된 걸 확인할 수 있다. $ git submodule e9e89a4613baee823596822b7d246f5931263491 themes/LoveIt (v0.2.11-143-ge9e89a4) 설정파일(config.toml) 생성 다음으로 themes/LoveIt/exampleSite/config.toml 파일을 복사해 초기에 생성된 config.toml 에 덮어쓴다. . ├── archetypes ├── config.toml \u003c== 초기에 생성된 config.toml [...] └── themes └── LoveIt └── exampleSite └── config.toml \u003c== 복사할 config.toml 교체된 config.toml 설정파일을 열어보면 themesDir 값을 삭제하고 저장한다. 게시글 생성 LoveIt 테마에서는 /content/posts/ 폴더 아래에 게시글이 생성되어야 정상적으로 출력된다. 테마마다 게시글이 위치해야하는 경로나 이름이 다를 수 있다. 테마 페이지에서 안내해주는 가이드 문서를 참고하여 게시글을 해당 경로에 맞게 생성해야 한다. Front Matter 설명 title : 게시글의 제목 date : 게시글의 최초 작성시간 lastmod : 게시글의 마지막 수정시간 description : 게시글의 설명. 검색엔진 최적화(SEO, Search Engine Optimization)를 위해서 게시글 제목(title)에 담긴 내용을 풀어 간단하게 적어놓는다. draft : draft: true 일 경우, 실제 배포환경에서 해당 게시글은 보이지 않게 된다. 작성한 글을 개발 환경이 아닌 실제 환경에도 게시하고 싶다면 반드시 draft: false 값을 설정한다. tags : 게시글의 태그 toc : table of content의 약자. Front Matter의 값이 toc: true 일 경우 마크다운 기반의 게시글 목차를 정리해서 보여준다. categories : 게시글의 목록 $ hugo new posts/FirstPost.md \u003c== 포스트 만들기 $ hugo serve \u003c== 로컬호스트 서버 실행하기 Start building sites … hugo v0.102.3+extended darwin/arm64 BuildDate=unknown WARN 2022/09/14 16:27:51 Current environment is \"development\". The \"comment system\", \"CDN\" and \"fingerprint\" will be disabled. 当前运行环境是 \"development\". \"评论系统\", \"CDN\" 和 \"fingerprint\" 不会启用. | EN -------------------+----- Pages | 19 Paginator pages | 0 Non-page files | 0 Static files | 75 Processed images | 0 Aliases | 6 Sitemaps | 1 Cleaned | 0 Built in 55 ms Watching for changes in /Users/ms/blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/ms/blog/config.toml, /Users/ms/blog/themes/LoveIt/config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 마지막에 Web Server is available at http://localhost:1313/ 메세지가 출력되면 정상적으로 완료된 것이다. 인터넷 브라우저를 열어 http://localhost:1313/ 으로 접속한다. 블로그가 제대로 실행되는지 확인한다 git remote 추가 명령어 형식 $ git remote add origin [개발용 repository의 URL] git remote : 현재 프로젝트에 등록된 리모트 저장소를 확인하는 명령어이고 리모트 저장소의 단축 이름을 보여준다. 레포지터리를 복제(Clone)하면 origin이라는 리모트 저장소가 자동으로 등록되기 때문에 origin이라는 이름을 볼 수 있다. origin : 축약형 이름을 말한다. 개발용(Development) repository의 URL : https://github.com/\u003cGithub 유저네임\u003e/\u003c블로그용 레포지터리 이름\u003e 리모트 저장소가 정상적으로 추가되었는지 git remote -v 명령어로 확인한다. -v 옵션을 주면 등록된 리모트 저장소의 이름과 URL을 같","date":"2022-09-13","objectID":"/makeblogwithhugoandgithub/:2:0","tags":["Mac","Linux","OS"],"title":"hugo \u0026 Github을 사용한 블로그 구축","uri":"/makeblogwithhugoandgithub/"},{"categories":["Blog"],"content":"참고자료 Hugo-LoveIt 테마 구축 방법 Hugo x github 블로그 설치 방법 ","date":"2022-09-13","objectID":"/makeblogwithhugoandgithub/:3:0","tags":["Mac","Linux","OS"],"title":"hugo \u0026 Github을 사용한 블로그 구축","uri":"/makeblogwithhugoandgithub/"}]