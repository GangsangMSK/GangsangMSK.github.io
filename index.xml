<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>MSK&#39;s playground</title>
        <link>https://gangsangmsk.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wjdgudtk1234@gmail.com (Minsuk Kim)</managingEditor>
            <webMaster>wjdgudtk1234@gmail.com (Minsuk Kim)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 01 Nov 2022 14:03:53 &#43;0900</lastBuildDate>
            <atom:link href="https://gangsangmsk.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>[Swift Practice] in 22/11/01</title>
    <link>https://gangsangmsk.github.io/221101/</link>
    <pubDate>Tue, 01 Nov 2022 14:03:53 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/221101/</guid>
    <description><![CDATA[Stored property Stored property 는 초기화를 하지 않으면 에러가 난다.
초기화 방법으로는 다음 3가지가 있다.
초기값이 있거나
init을 이용해서 초기화하거나
옵셔널 변수(상수)로 선언(자동으로 nil로 초기화)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Man{ var age : Int = 1 var weight : Double = 3.5 init(yourAge: Int, yourWeight : Double){ age = yourAge weight = yourWeight } //designated initializer func display(){ print(&#34;나이=\(age), 몸무게=\(weight)&#34;) } class func cM(){ print(&#34;cM은 클래스 메서드입니다.]]></description>
</item>
<item>
    <title>[Swift Practice] in 22/10/18</title>
    <link>https://gangsangmsk.github.io/221018/</link>
    <pubDate>Tue, 18 Oct 2022 14:03:53 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/221018/</guid>
    <description><![CDATA[Class (클래스) 1 2 3 4 class Man{ var age : Int = 1 // Stored property var weight : Double = 3.5 } 1 2 3 4 class Man{ var age : Int? var weight : Double? } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Man{ var age : Int? var weight : Double? func display(){ print(&#34;나이는 \(age!), 몸무게는 \(weight!)&#34;) } } var MS : Man = Man() //클래스명 다음의 괄호는 눈에 보이지 않는 default initializer를 나타냄 MS.]]></description>
</item>
<item>
    <title>[Swift Practice] in 22/10/11</title>
    <link>https://gangsangmsk.github.io/221011/</link>
    <pubDate>Tue, 11 Oct 2022 14:03:53 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/221011/</guid>
    <description><![CDATA[Function (함수) 1 2 3 4 5 6 7 8 func add(first x: Int, second y: Int) -&gt; Int { // first, second : argument label // x, y : parameter name print(#function) //add(first:second:) return(x+y) } let a = add(first:10, second:20) //add(first:second:) 1 2 3 4 5 6 func add(_ x: Int, _ y: Int) -&gt; Int { print(#function) //add(first:second:) return(x+y) } let a = add(10, 20) //add(_:_:) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //Swift 2, 지금은 오류 var myValue = 10 func doubleValue (inout value: Int) -&gt; Int { value += value return(value) } doubleValue(value:&amp;myValue) //Swift 3이후 var myValue = 10 func doubleValue (value: inout Int) -&gt; Int { // Swift 에서 call by reference를 구현하는 방법 inout 사용 value += value return(value) } print(myValue) print(doubleValue(value : &amp;myValue)) // 매개변수에 &amp; 사용 print(myValue) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func printName(firstName:String, lastName:String?]]></description>
</item>
<item>
    <title>[Swift Practice] in 22/10/04</title>
    <link>https://gangsangmsk.github.io/221004/</link>
    <pubDate>Tue, 04 Oct 2022 14:14:41 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/221004/</guid>
    <description><![CDATA[if문 1 2 3 4 5 6 7 8 var x = 1 while true { if x &gt; 5 { break } //조건(x&gt;5)이 참일 때 실행(break) print(x) //1 2 3 4 5 x = x + 1 } guard else문 1 2 3 4 5 6 7 8 var x = 1 while true { guard x &lt; 10 else { break }//조건(x&lt;10)이 거짓일 때 실행(break) print(x) //1 2 3 4 5 6 7 8 9, 조건(x&lt;10)이 참일 때 실행 x = x + 1 } if문은 조건 다음에 있는 구문이 참일 때 실행되지만, guard문은 조검 다음에 있는 구문이 거짓일 떄 실행된다.]]></description>
</item>
<item>
    <title>[Swift] ControlFlow(제어문)</title>
    <link>https://gangsangmsk.github.io/controlflow/</link>
    <pubDate>Wed, 28 Sep 2022 16:24:19 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/controlflow/</guid>
    <description><![CDATA[For-In Loops (For-In문) for-in 반복문은 컬렉션 또는 숫자 범위 내에 있는 목록을 반복한다.
1 2 3 for 상수명 in 컬렉션 또는 범위 { // 실행될 코드 } &lsquo;상수명&rsquo;은 반복문이 돌면서 컬렉션 또는 범위에서 가져온 항목을 담게 될 상수이다.
&lsquo;컬렉션 또는 범위&rsquo;는 반복문이 반복되면서 현재의 항목을 참조한다.
문자열 값들의 배열이거나 범위 연산, 문자들로 구성된 문자열일 수 있다.
1 2 3 4 for index in 1...5 { print(index) } // index라는 이름의 상수에 현재 항목이 할당되면서 시작 // 1 2 3 4 5 1 2 3 4 for _ in 1.]]></description>
</item>
<item>
    <title>[Swift] Operator(연산자)</title>
    <link>https://gangsangmsk.github.io/operator/</link>
    <pubDate>Tue, 27 Sep 2022 16:12:36 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/operator/</guid>
    <description><![CDATA[Assingnment Operator (기본 할당 연산자) 할당 연산자는 두 개의 피연산자를 가진다.
왼쪽에 있는 피연산자는 값이 할당되는 변수 또는 상수이며, 오른쪽에 있는 피연산자는 할당할 값을 쓴다.
오른쪽 피연산자는 주로 산술식 또는 논리식을 수행하는 표현식이며, 그 결과는 왼쪽 피연산자인 변수나 상수에 할당한다.
1 2 3 4 5 6 7 let a = 10 var b = 20 b = a // b에 10이 들어간다. let (x, y) = (1, 2) // x는 1이고, y는 2이다.]]></description>
</item>
<item>
    <title>[Swift] Any &amp; AnyObject</title>
    <link>https://gangsangmsk.github.io/anyandanyobject/</link>
    <pubDate>Tue, 27 Sep 2022 16:08:29 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/anyandanyobject/</guid>
    <description><![CDATA[AnyObject(protocal) AnyObject can represent an instance of any class type.
AnyObject는 범용 타입이고 상속관계가 아니라도 타입 캐스팅 가능한 타입이다.
어떤 클래스의 객체도 저장 가능하다.
가장 추상화된 최상위 개념이고 Objective-C의 id와 같다.
클래스만 허용하며 구조체나 열거형은 허용하지 않는다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var x : Any = &#34;Hi&#34; print(x, type(of:x)) // Hi String x = 10 print(x, type(of:x)) // 10 Int x = 3.]]></description>
</item>
<item>
    <title>[Swift] Optinal(옵셔널), Optional Binding(옵셔널 바인딩)</title>
    <link>https://gangsangmsk.github.io/optinals/</link>
    <pubDate>Tue, 27 Sep 2022 15:45:28 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/optinals/</guid>
    <description><![CDATA[Optional (옵셔널) 값을 반환할 때 오류가 발생할 가능성이 있는 값은 옵셔널 타입이라는 객체로 감싸서 반환한다.
1 2 3 4 print(Int(&#34;123&#34;)) // Optional(123) 을 출력 print(Int(&#34;Hi&#34;)) // Int(&#34;Hi&#34;) 은 정수 값을 반환할 수 없음, 아무런 값도 반환할 수 없다는 의미로 nil을 반환 Optional Type (옵셔널 타입) Swift에서는 기본 자료형(Int, Double, String 등)은 기본적으로는 nil값을 저장할 수 없지만 옵셔널 타입을 이용하여 nil 값을 저장할 수 있다.
옵셔널 타입은 변수 또는 상수에 아무런 값이 할당되지 않는 상황을 안전하게 처리하기 위한 방법 제공한다.]]></description>
</item>
<item>
    <title>[Swift] Tuple</title>
    <link>https://gangsangmsk.github.io/tuple/</link>
    <pubDate>Sun, 25 Sep 2022 17:20:38 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/tuple/</guid>
    <description><![CDATA[Tuple(튜플) 튜플은 Swift 에서 가장 강력한 기능 중 하나이다. 여러 값을 하나의 개체에 일시적으로 묶는 방법이다. 튜플에는 타입과 상관없이 요소들을 저장할 수 있고, 저장된 값들이 모두 동일한 타입이어야 한다는 제약이 없다. 튜플의 요소들은 다양한 방법들을 이용해 접근할 수 있다.
인덱스 위치를 참조하여 접근할 수 있다. 1 2 3 4 let myTuple = (10, 12.1, &#34;Hi&#34;) let myString = myTuple.2 print(myString) //Hi 튜플의 요소를 추출하여 번수 또는 상수에 할당하여 사용할 수 있다.]]></description>
</item>
<item>
    <title>[Blog] utterance를 이용한 블로그 댓글 기능 만들기</title>
    <link>https://gangsangmsk.github.io/makeblogcommentswithutterance/</link>
    <pubDate>Wed, 21 Sep 2022 13:47:24 &#43;0900</pubDate>
    <author>Minsuk Kim</author>
    <guid>https://gangsangmsk.github.io/makeblogcommentswithutterance/</guid>
    <description><![CDATA[utterance를 사용한 이유 댓글 기능을 구현할 수 있는 여러 종류(disqus, gittalk, giscus 등)의 댓글 플랫폼들이 있지만, 많은 플랫폼 중에 utterances를 선택한 이유는 다음과 같다.
utterances는 Github 계정 로그인을 통해 댓글을 달고, 댓글이 달리면 알림이 Github Repository 의 Issue 로 올라오는 시스템이여서 댓글이 달리면 메일로 댓글 알림을 받을 수 있다.
그리고 광고가 없고 가볍다.
마지막으로, 마크다운 문법을 사용할 수 있다.
utterances 적용하기 1. Issue(댓글)이 저장될 Repository를 정하거나 생성한다. 나는 기존 블로그용으로 사용하는 GangsangMSK.]]></description>
</item>
</channel>
</rss>
